class Square {
  constructor(options, wall, key) {
    this.options = options;
    this.num_options = options.length;
    this.wall = wall;
    this.key = key;
  }
}

const walls = [
  [0, 0],
  [0, 1],
  [0, 2],
  [0, 3],
  [0, 4],
  [0, 5],
  [0, 6],
  [0, 7],
  [0, 8],
  [0, 9],
  [0, 10],
  [0, 11],
  [0, 12],
  [0, 13],
  [0, 14],
  [0, 15],
  [0, 16],
  [0, 17],
  [0, 18],
  [0, 19],
  [0, 20],
  [0, 21],
  [0, 22],
  [0, 23],
  [0, 24],
  [0, 25],
  [0, 26],
  [1, 6],
  [1, 16],
  [1, 26],
  [2, 0],
  [2, 2],
  [2, 3],
  [2, 4],
  [2, 6],
  [2, 8],
  [2, 10],
  [2, 11],
  [2, 12],
  [2, 13],
  [2, 14],
  [2, 16],
  [2, 18],
  [2, 20],
  [2, 21],
  [2, 22],
  [2, 23],
  [2, 24],
  [2, 26],
  [3, 0],
  [3, 2],
  [3, 6],
  [3, 8],
  [3, 10],
  [3, 14],
  [3, 16],
  [3, 18],
  [3, 24],
  [3, 26],
  [4, 0],
  [4, 2],
  [4, 4],
  [4, 5],
  [4, 6],
  [4, 8],
  [4, 10],
  [4, 12],
  [4, 14],
  [4, 16],
  [4, 18],
  [4, 19],
  [4, 20],
  [4, 21],
  [4, 22],
  [4, 24],
  [4, 26],
  [5, 0],
  [5, 2],
  [5, 6],
  [5, 8],
  [5, 10],
  [5, 12],
  [5, 14],
  [5, 16],
  [5, 18],
  [5, 22],
  [5, 24],
  [5, 26],
  [6, 0],
  [6, 2],
  [6, 3],
  [6, 4],
  [6, 6],
  [6, 8],
  [6, 9],
  [6, 10],
  [6, 12],
  [6, 14],
  [6, 15],
  [6, 16],
  [6, 18],
  [6, 19],
  [6, 20],
  [6, 22],
  [6, 24],
  [6, 25],
  [6, 26],
  [7, 0],
  [7, 4],
  [7, 6],
  [7, 10],
  [7, 12],
  [7, 18],
  [7, 22],
  [7, 26],
  [8, 0],
  [8, 1],
  [8, 2],
  [8, 3],
  [8, 4],
  [8, 6],
  [8, 7],
  [8, 8],
  [8, 10],
  [8, 12],
  [8, 13],
  [8, 14],
  [8, 15],
  [8, 16],
  [8, 17],
  [8, 18],
  [8, 20],
  [8, 22],
  [8, 23],
  [8, 24],
  [8, 26],
  [9, 0],
  [9, 4],
  [9, 6],
  [9, 10],
  [9, 14],
  [9, 20],
  [9, 24],
  [9, 26],
  [10, 0],
  [10, 2],
  [10, 3],
  [10, 4],
  [10, 6],
  [10, 8],
  [10, 9],
  [10, 10],
  [10, 11],
  [10, 12],
  [10, 14],
  [10, 15],
  [10, 16],
  [10, 17],
  [10, 18],
  [10, 20],
  [10, 21],
  [10, 22],
  [10, 23],
  [10, 24],
  [10, 26],
  [11, 0],
  [11, 2],
  [11, 6],
  [11, 10],
  [11, 20],
  [11, 26],
  [12, 0],
  [12, 2],
  [12, 4],
  [12, 5],
  [12, 6],
  [12, 8],
  [12, 10],
  [12, 12],
  [12, 13],
  [12, 14],
  [12, 15],
  [12, 16],
  [12, 17],
  [12, 18],
  [12, 20],
  [12, 22],
  [12, 23],
  [12, 24],
  [12, 26],
  [13, 0],
  [13, 4],
  [13, 8],
  [13, 10],
  [13, 12],
  [13, 14],
  [13, 18],
  [13, 20],
  [13, 22],
  [13, 24],
  [13, 26],
  [14, 0],
  [14, 2],
  [14, 3],
  [14, 4],
  [14, 5],
  [14, 6],
  [14, 8],
  [14, 10],
  [14, 12],
  [14, 14],
  [14, 16],
  [14, 18],
  [14, 19],
  [14, 20],
  [14, 22],
  [14, 24],
  [14, 26],
  [15, 0],
  [15, 6],
  [15, 8],
  [15, 10],
  [15, 12],
  [15, 14],
  [15, 16],
  [15, 20],
  [15, 22],
  [15, 24],
  [15, 26],
  [16, 0],
  [16, 1],
  [16, 2],
  [16, 3],
  [16, 4],
  [16, 6],
  [16, 7],
  [16, 8],
  [16, 10],
  [16, 12],
  [16, 14],
  [16, 16],
  [16, 17],
  [16, 18],
  [16, 20],
  [16, 22],
  [16, 24],
  [16, 26],
  [17, 0],
  [17, 4],
  [17, 8],
  [17, 14],
  [17, 18],
  [17, 22],
  [17, 26],
  [18, 0],
  [18, 2],
  [18, 4],
  [18, 5],
  [18, 6],
  [18, 8],
  [18, 9],
  [18, 10],
  [18, 11],
  [18, 12],
  [18, 13],
  [18, 14],
  [18, 15],
  [18, 16],
  [18, 18],
  [18, 19],
  [18, 20],
  [18, 21],
  [18, 22],
  [18, 24],
  [18, 25],
  [18, 26],
  [19, 0],
  [19, 2],
  [19, 6],
  [19, 8],
  [19, 18],
  [19, 22],
  [19, 26],
  [20, 0],
  [20, 2],
  [20, 3],
  [20, 4],
  [20, 6],
  [20, 8],
  [20, 10],
  [20, 11],
  [20, 12],
  [20, 13],
  [20, 14],
  [20, 15],
  [20, 16],
  [20, 17],
  [20, 18],
  [20, 19],
  [20, 20],
  [20, 22],
  [20, 23],
  [20, 24],
  [20, 26],
  [21, 0],
  [21, 2],
  [21, 6],
  [21, 10],
  [21, 22],
  [21, 26],
  [22, 0],
  [22, 4],
  [22, 5],
  [22, 6],
  [22, 7],
  [22, 8],
  [22, 9],
  [22, 10],
  [22, 12],
  [22, 13],
  [22, 14],
  [22, 15],
  [22, 16],
  [22, 17],
  [22, 18],
  [22, 19],
  [22, 20],
  [22, 22],
  [22, 24],
  [22, 25],
  [22, 26],
  [23, 0],
  [23, 2],
  [23, 12],
  [23, 16],
  [23, 20],
  [23, 22],
  [23, 24],
  [23, 26],
  [24, 0],
  [24, 2],
  [24, 3],
  [24, 4],
  [24, 5],
  [24, 6],
  [24, 7],
  [24, 8],
  [24, 9],
  [24, 10],
  [24, 12],
  [24, 14],
  [24, 16],
  [24, 18],
  [24, 20],
  [24, 21],
  [24, 22],
  [24, 24],
  [24, 26],
  [25, 0],
  [25, 10],
  [25, 14],
  [25, 18],
  [26, 0],
  [26, 1],
  [26, 2],
  [26, 3],
  [26, 4],
  [26, 5],
  [26, 6],
  [26, 7],
  [26, 8],
  [26, 9],
  [26, 10],
  [26, 11],
  [26, 12],
  [26, 13],
  [26, 14],
  [26, 15],
  [26, 16],
  [26, 17],
  [26, 18],
  [26, 19],
  [26, 20],
  [26, 21],
  [26, 22],
  [26, 23],
  [26, 24],
  [26, 25],
  [26, 26],
];

var keys = [[25,9],[5,15]]

var maze = Array(27)
  .fill(0)
  .map((row) => new Array(27).fill(0));

for (let i = 0; i < 27; i++) {
  for (let j = 0; j < 27; j++) {
    maze[i][j] = new Square([], false, false);
  }
}

keys.forEach((e) => {
  maze[e[0]][e[1]] = new Square([], false, true);
});

walls.forEach((e) => {
  maze[e[0]][e[1]] = new Square([], true, false);
});



for (let i = 1; i < 26; i++) {
  for (let j = 1; j < 26; j++) {
    let opt = [];
    if (maze[i][j].wall === true) continue;
    if (maze[i + 1][j].wall === false) opt.push("D");
    if (maze[i - 1][j].wall === false) opt.push("U");
    if (maze[i][j + 1].wall === false) opt.push("R");
    if (maze[i][j - 1].wall === false) opt.push("L");
    maze[i][j].options = opt
  }
}

console.log(maze)

export { maze };
